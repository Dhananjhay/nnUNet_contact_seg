---
# Adapted from @pvandyken's composite action
name: Build and cache Python project
description: Install project dependencies and optionally install project
inputs:
  python-version:
    description: Python version to setup
    required: true
  manager:
    description: Dependency manager used (e.g. uv)
    required: false
    default: "uv"
  install-library:
    description: |
      Indicate if project library should be installed. 'true' installs from
      cloned repo, false skips install
    required: false
    default: "false"
  install-deps-with:
    description: |
      Install specified groups with dependency installation. Ignored if
      install-deps-only is provided
    required: false
    default: dev
  install-deps-only:
    description: install only the specified dependency groups
    required: false
  sparse-checkout:
    description: enables sparse-checkout on actions/checkout
    required: false
  sparse-checkout-cone-mode:
    description: |
      Specifies whether to use cone-mode when doing a sparse checkout.
    required: false
outputs:
  python-version:
    description: "Resolved python version as reported by setup-python"
    value: ${{ steps.setup-python.outputs.python-version }}

runs:
  using: composite
  steps:
    - name: Clone repo
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.base_ref }}
        sparse-checkout: ${{ inputs.sparse-checkout }}
        sparse-checkout-cone-mode: ${{ inputs.sparse-checkout-cone-mode }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      id: install-uv
      if: inputs.manager == 'uv'
      with:
        version: '0.6.14'
        enable-cache: true
        cache-dependency-glob: |
          **/uv.lock

    - name: Install python
      run: uv python install ${{ inputs.python-version }}

    - name: Create virtual environment
      if: inputs.manager == 'uv'
      shell: bash
      run: uv venv

    # Install dependencies with manager, if necessary
    - name: Install dependencies (with)
      if: >
        inputs.manager == 'uv' && ! inputs.install-deps-only
      shell: bash
      run: >
        uv pip install -r pyproject.toml --extra ${{ inputs.install-deps-with }}

    - name: Install library
      if: inputs.manager == 'uv' && inputs.install-library == 'true'
      shell: bash
      run: uv pip install -e .
    