from snakebids import bids, generate_inputs, get_wildcard_constraints
from appdirs import AppDirs

configfile: 'config/snakebids.yml'

# Get input wildcards
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    validate=not config.get("plugins.validator.skip", False)
)

def get_download_dir():
    if "nnUNet_SEEG_CACHE_DIR" in os.environ.keys():
        download_dir = os.environ["nnUNet_SEEG_CACHE_DIR"]
    else:
        # create local download dir if it doesn't exist
        dirs = AppDirs("nnUNet", "arun")
        download_dir = dirs.user_cache_dir
    return download_dir

def get_cmd_copy_inputs(wildcards, input):
    in_img = input.post_ct
    if isinstance(in_img, str):
        # we have one input image
        return f"cp {in_img} tempimg/temp_0000.nii.gz"
    else:
        cmd = []
        # we have multiple input images
        for i, img in enumerate(input.in_img):
            cmd.append(f"cp {img} tempimg/temp_{i:04d}.nii.gz")
        return " && ".join(cmd)
    
download_dir = get_download_dir()

def get_model():
    local_model = config["resource_urls"].get('nnUNet_model')

    return (Path(download_dir)/ "model" / Path(local_model).name).absolute()

rule all:
    input:
        contact_coords = inputs['post_ct'].expand(
            bids(
                root = config['output_dir'],
                suffix = 'nnunet.fcsv',
                **inputs['post_ct'].wildcards
            )
        )

rule download_model:
    params:
        url = config["resource_urls"]["nnUNet_model"],
        model_dir = Path(download_dir) / "model"

    output:
        nnUNet_model = get_model()

    shell:
        "mkdir -p {params.model_dir} && wget https://{params.url} -O {output}"

rule model_inference:
    input:
        post_ct = inputs['post_ct'].path,
        nnUNet_model = get_model()

    params:
        cmd_copy_inputs = get_cmd_copy_inputs,
        temp_lbl="templbl/temp.nii.gz",
        model_dir="tempmodel",
        in_folder="tempimg",
        out_folder="templbl",

    
    output:
        contact_seg = bids(
            root = config['output_dir'],
            suffix = 'dseg.nii.gz',
            desc = 'contacts_nnunet',
            **inputs['post_ct'].wildcards
        ),
    log:
        bids(
            root="logs",
            suffix="nnunet.txt",
            **inputs['post_ct'].wildcards,
        ),

    shell:
        #create temp folders
        #cp input image to temp folder
        #extract model
        #set nnunet env var to point to model
        #set threads
        # run inference
        #copy from temp output folder to final output
        "mkdir -p {params.model_dir} {params.in_folder} {params.out_folder} && "
        "{params.cmd_copy_inputs} && "
        "unzip {input.nnUNet_model} -d {params.model_dir} && "
        "export nnUNet_results={params.model_dir} && "
        "export nnUNet_raw={params.in_folder} && "
        "pwd && "
        "uv run scripts/nnUNet_predict.py && "
        # "nnUNet_predict -d Dataset011_seeg_contacts -i {params.in_folder} -o {params.out_folder} -f 0 -tr nnUNetTrainer_250epochs -c 3d_fullres -p nnUNetPlans &> {log} && "
        "echo 'nnunet predicting' && "
        "cp {params.temp_lbl} {output.contact_seg}"

rule get_coords:
    input:
        model_seg = rules.model_inference.output.contact_seg
    
    output:
        model_coords = bids(
                root = config['output_dir'],
                suffix = 'nnunet.fcsv',
                **inputs['post_ct'].wildcards
            )
    script:
        './scripts/nnUNet_coords.py'

# if rule

# rule get_coords:
#     input:
#         model_seg = rules.model_inference.output.contact_seg
    
#     output:
#         model_coords = bids(
#             root = config['output_dir'],
#             suffix = 'dseg.nii.gz',
#             desc = 'contacts_nnunet',
#             **inputs['electrode_ct'].wildcards
#         )

#     script:
#         './scripts/nnUNet_coords.py'